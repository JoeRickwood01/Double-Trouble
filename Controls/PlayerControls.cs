//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""6e37c558-df62-4370-9c50-46097c92781b"",
            ""actions"": [
                {
                    ""name"": ""MoveController"",
                    ""type"": ""Value"",
                    ""id"": ""eb141082-741e-4d8d-99d1-1add9b189726"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveKeyBoard"",
                    ""type"": ""Value"",
                    ""id"": ""4b268091-6b9d-41fa-b1ad-111f01abd1f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwapCharacterController"",
                    ""type"": ""Button"",
                    ""id"": ""df7e037b-efc7-43f5-8e5f-4610907c15d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapCharacterKeyBoard"",
                    ""type"": ""Button"",
                    ""id"": ""61280b6c-f5b0-436d-a461-3e8212f6ae79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractController"",
                    ""type"": ""Button"",
                    ""id"": ""51181610-7b08-411d-ad49-22c82858a59c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractKeyBoard"",
                    ""type"": ""Button"",
                    ""id"": ""55af5dab-91f5-4d6d-a927-36c429db500d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d79fd36-880d-4059-9982-42e83b6044eb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""90a03b42-d9be-4fb9-9bf4-7a45a4debe62"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyBoard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""74064468-ffc2-44f7-9d71-92e4f29cc976"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fb035cc-0699-4b8b-b517-25d8f9bc8f7f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""65f1c5e8-3aaa-4be3-925b-fc4068adc3b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fbaa8748-1574-42b7-b03a-8f5cd06511e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c388ad71-4d14-4ae8-ab82-afba0dc42c0d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapCharacterController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b36784c5-db78-4245-ad05-07e3ac0f7841"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapCharacterKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9019ad3d-aa78-4cc8-b3d3-e4595b781e6d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff69037d-744f-4b3e-b473-05f0fa316652"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractKeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveController = m_Gameplay.FindAction("MoveController", throwIfNotFound: true);
        m_Gameplay_MoveKeyBoard = m_Gameplay.FindAction("MoveKeyBoard", throwIfNotFound: true);
        m_Gameplay_SwapCharacterController = m_Gameplay.FindAction("SwapCharacterController", throwIfNotFound: true);
        m_Gameplay_SwapCharacterKeyBoard = m_Gameplay.FindAction("SwapCharacterKeyBoard", throwIfNotFound: true);
        m_Gameplay_InteractController = m_Gameplay.FindAction("InteractController", throwIfNotFound: true);
        m_Gameplay_InteractKeyBoard = m_Gameplay.FindAction("InteractKeyBoard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_MoveController;
    private readonly InputAction m_Gameplay_MoveKeyBoard;
    private readonly InputAction m_Gameplay_SwapCharacterController;
    private readonly InputAction m_Gameplay_SwapCharacterKeyBoard;
    private readonly InputAction m_Gameplay_InteractController;
    private readonly InputAction m_Gameplay_InteractKeyBoard;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveController => m_Wrapper.m_Gameplay_MoveController;
        public InputAction @MoveKeyBoard => m_Wrapper.m_Gameplay_MoveKeyBoard;
        public InputAction @SwapCharacterController => m_Wrapper.m_Gameplay_SwapCharacterController;
        public InputAction @SwapCharacterKeyBoard => m_Wrapper.m_Gameplay_SwapCharacterKeyBoard;
        public InputAction @InteractController => m_Wrapper.m_Gameplay_InteractController;
        public InputAction @InteractKeyBoard => m_Wrapper.m_Gameplay_InteractKeyBoard;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @MoveController.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveController;
                @MoveController.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveController;
                @MoveController.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveController;
                @MoveKeyBoard.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveKeyBoard;
                @MoveKeyBoard.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveKeyBoard;
                @MoveKeyBoard.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveKeyBoard;
                @SwapCharacterController.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterController;
                @SwapCharacterController.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterController;
                @SwapCharacterController.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterController;
                @SwapCharacterKeyBoard.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterKeyBoard;
                @SwapCharacterKeyBoard.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterKeyBoard;
                @SwapCharacterKeyBoard.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwapCharacterKeyBoard;
                @InteractController.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractController;
                @InteractController.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractController;
                @InteractController.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractController;
                @InteractKeyBoard.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractKeyBoard;
                @InteractKeyBoard.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractKeyBoard;
                @InteractKeyBoard.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteractKeyBoard;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveController.started += instance.OnMoveController;
                @MoveController.performed += instance.OnMoveController;
                @MoveController.canceled += instance.OnMoveController;
                @MoveKeyBoard.started += instance.OnMoveKeyBoard;
                @MoveKeyBoard.performed += instance.OnMoveKeyBoard;
                @MoveKeyBoard.canceled += instance.OnMoveKeyBoard;
                @SwapCharacterController.started += instance.OnSwapCharacterController;
                @SwapCharacterController.performed += instance.OnSwapCharacterController;
                @SwapCharacterController.canceled += instance.OnSwapCharacterController;
                @SwapCharacterKeyBoard.started += instance.OnSwapCharacterKeyBoard;
                @SwapCharacterKeyBoard.performed += instance.OnSwapCharacterKeyBoard;
                @SwapCharacterKeyBoard.canceled += instance.OnSwapCharacterKeyBoard;
                @InteractController.started += instance.OnInteractController;
                @InteractController.performed += instance.OnInteractController;
                @InteractController.canceled += instance.OnInteractController;
                @InteractKeyBoard.started += instance.OnInteractKeyBoard;
                @InteractKeyBoard.performed += instance.OnInteractKeyBoard;
                @InteractKeyBoard.canceled += instance.OnInteractKeyBoard;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMoveController(InputAction.CallbackContext context);
        void OnMoveKeyBoard(InputAction.CallbackContext context);
        void OnSwapCharacterController(InputAction.CallbackContext context);
        void OnSwapCharacterKeyBoard(InputAction.CallbackContext context);
        void OnInteractController(InputAction.CallbackContext context);
        void OnInteractKeyBoard(InputAction.CallbackContext context);
    }
}
